function [reacInd,x,stat] = tradeOff(model,direction,weights,tol,steadyState,probType,solveTime,x0,prevSols)
% USAGE:
%   [reacInd,x,stat] = tradeOff(model,direction,weights,tol,steadystate,probType,solveTime,x0,prevSols)
%
% INPUTS:
%     model:       COBRA model structure.
%     direction:   A vector of size equal to number of reactions in the
%                  model. The unique elements in this vector has to be -1,0
%                  and 1 defining the flux directionality info.
%     weights:     weights for non-core reactions. Positive weighted reactions have more 
%                  chance to get included and negative weighted reactions
%                  have less chance to get included
%     tol:         tolerance level (minimum absolute flux that has to be carried
%                  by a reaction for it to be defined as consistent)
%     steadyState: Boolean value indicating whether to assume steady state
%                  condition (S.v = 0) or accumulation condition (S.v >= 0)
%
% OPTIONAL INPUTS:
%     probType:    'tradeOffMILP' (Default): Mixed Integer Linear
%                  Programming, 'tradeOffDC': Difference of convex functions
%     solveTime:   If probType is 'tradeOffMILP', solveTime refers to the upper limit
%                  of solving time
%     x0:          solution vector to initialize with for MILP problem. 
%                  This can be obtained from the LPforward and LPreverse
%     prevSols:    A cell of previously obtained solutions that needs to be
%                  excluded in the current solution. Note: This works only for
%                  the probType 'tradeOffMILP'
%
% OUTPUTS:
%     reacInd: Reaction IDs corresponding to reactions that has to be
%              present in the final extracted model
%     x:       Solution returned after optimization
%     stat:    Status of optimization
%
% .. Author:
%       - Pavan Kumar S, BioSystems Engineering and control (BiSECt) lab, IIT Madras

if ~exist('probType', 'var') || isempty(probType)
    probType='tradeOffMILP';     
end

if strcmp(probType,'tradeOffMILP')    
    if ~exist('solveTime', 'var') || isempty(solveTime)
        solveTime=7200;     
    end
end

[m,n] = size(model.S);
dir0 = direction==0; % boolean value indicating if the reaction is non-core (1) or not (0)
n_ = sum(dir0); % number of non core reactions
n_rev = sum(dir0 & model.rev); % number of noncore reversible reactions

% the decision variables are v,z,a,b. v defines the flux values. z define
% the binary integer for the noncore reactions. a and b are for
% reverse and forward direction of the noncore reversible reactions. 

% objective
f = [zeros(n,1);weights(dir0);zeros(n_rev*2,1)];

% stoichiometry or topology constraints
Aeq1 = [model.S, sparse(m,n_+(n_rev*2))];
beq1 = zeros(m,1);

if steadyState
    csenseeq1 = repmat('E',m,1); % equality (For consistency based model extraction)
else
    csenseeq1 = repmat('G',m,1); % greater than (For topology based model extraction)
end

if strcmp(probType,'tradeOffMILP')
   % relation between the flux of non-core irreversible reactions and the
   % corresponding binary variables
    temp1 = -1*speye(n);
    temp1 = temp1(dir0,:);
    temp2 = spdiag(tol*ones(n_,1));
    % getting the ids of irrev reactions in the non-core reactions
    temp = ~model.rev(dir0);
    temp1 = temp1(temp,:);
    temp2 = temp2(temp,:);

    Aineq1 = [temp1,temp2,sparse(sum(temp),n_rev*2)];
    bineq1 = zeros(sum(temp),1);
    csenseineq1 = repmat('L',sum(temp),1); % lesser than
    
    temp2 = -1*spdiag(model.ub(dir0));
    temp2 = temp2(temp,:);

    Aineq2 = [temp1,temp2,sparse(sum(temp),n_rev*2)];
    bineq2 = zeros(sum(temp),1);
    csenseineq2 = repmat('L',sum(temp),1); % lesser than

    % constraints to ignore the previously obtained solutions
    Aineq3=[];bineq3=[];csenseineq3=[];
    if exist('prevSols', 'var') && ~isempty(prevSols)
        for id=1:numel(prevSols)
            temp = find(dir0);
            temp = ismember(temp,prevSols{id});
            temp =temp';
            Aineq3 = [Aineq3;[zeros(1,n),temp,zeros(1,n_rev*2)]];
            bineq3 = [bineq3;sum(temp)-1];
            csenseineq3 = [csenseineq3;'L'];
        end
    end
    
    % constraints for reversible non-core reactions to carry flux only in
    % one direction. Either in forward direction of reverse direction. 
    % a + b = z
    temp1 = speye(n_);
    temp = model.rev(dir0);
    temp1 = temp1(temp,:);

    Aeq2 = [sparse(sum(temp),n), temp1, speye(n_rev), speye(n_rev)];
    beq2 = zeros(sum(temp),1);
    csenseeq2 = repmat('E',sum(temp),1); 
    
    % constraint linking the binary variable, a and the flux through the
    % reversible non-core reactions

    temp1 = speye(n);
    temp1 = temp1(dir0 & model.rev,:); % ids of non-core reversible reactions
    temp = sum(dir0 & model.rev);
    Aineq4 = [temp1, sparse(temp,n_), -1*spdiag(tol*ones(temp,1)), spdiag(model.lb(dir0 & model.rev))];
    bineq4 = zeros(temp,1);
    csenseineq4 = repmat('G',temp,1);

    % constraint linking the binary variable, b and the flux through the
    % reversible non-core reactions

    temp1 = speye(n);
    temp1 = temp1(dir0 & model.rev,:); % ids of non-core reversible reactions
    temp = sum(dir0 & model.rev);
    Aineq5 = [temp1, sparse(temp,n_), -1*spdiag(model.ub(dir0 & model.rev)), spdiag(tol*ones(temp,1))];
    bineq5 = zeros(temp,1);
    csenseineq5 = repmat('L',temp,1);

    % bounds
    lb = model.lb;
    lb(direction==1)=max([tol*ones(sum(direction==1),1),lb(direction==1)],[],2);
    lb = [lb;zeros(n_+(2*n_rev),1)];
    ub = model.ub;
    ub(direction==-1)=-tol*ones(sum(direction==-1),1);
    ub = [ub;ones(n_+(2*n_rev),1)];

    % Set up MILP problem
    MILPproblem.A=[Aeq1;Aeq2;Aineq1;Aineq2;Aineq3;Aineq4;Aineq5];
    MILPproblem.b=[beq1;beq2;bineq1;bineq2;bineq3;bineq4;bineq5];
    MILPproblem.lb=lb;
    MILPproblem.ub=ub;
    MILPproblem.c=f;
    MILPproblem.osense=-1; % maximize
    MILPproblem.vartype = [repmat('C',n,1);repmat('B',n_*(2*n_rev),1)];
    MILPproblem.csense = [csenseeq1; csenseeq2; csenseineq1; csenseineq2; csenseineq3; csenseineq4; csenseineq5];
    changeCobraSolverParams('MILP', 'feasTol', 1e-9);
    if exist('x0', 'var')&&~isempty(x0)

        MILPproblem.x0  = [x0;abs(x0(dir0))>1e-12;]; 
    end
    solution = solveCobraMILP(MILPproblem,'timeLimit', solveTime);
    stat =solution.stat;
    if stat==1
        x = solution.cont;
        z = solution.int;
        reacInd = abs(x(1:n))>=tol*1e-7;
    else
        x=[];z=[];reacInd=[];
    end
    % reacInd = abs(x(1:n))~=0;    
elseif strcmp(probType,'minNetDC')
    % equalities
    Aeq1 = model.S;
    beq1 = zeros(m,1);
    if steadyState
        csenseeq1 = repmat('E',m,1); % equality (For consistency based gap filling)
    else
        csenseeq1 = repmat('G',m,1); % greater than (For topology based gap filling)
    end
    % bounds
    lb = model.lb;
    lb(direction==1)=max([tol*ones(sum(direction==1),1),lb(direction==1)],[],2);
    
    ub = model.ub;
    ub(direction==-1)=-tol*ones(sum(direction==-1),1);
   

    % Set up MILP problem
    DCproblem.A=Aeq1;
    DCproblem.b=beq1;
    DCproblem.csense = csenseeq1;
    DCproblem.lb=lb;
    DCproblem.ub=ub;
    DCproblem.p = direction==0;
    DCproblem.q = false(n,1);
    DCproblem.r = ~DCproblem.p;
    DCproblem.c = zeros(n,1);
    DCproblem.osense=1;
    DCproblem.lambda0=1;
    DCproblem.k = weights;
    solution = optimizeCardinality(DCproblem);
    stat=solution.stat;
    if stat~=1
        fprintf('%s%s\n',num2str(solution.stat),' = solution.stat')
        fprintf('%s%s\n',num2str(solution.origStat),' = solution.origStat')
        warning('DC solution may not be optimal')
        x =[];reacInd=[];
    else
        x=zeros(n,1);
        x(direction==0) = solution.x;
        x(direction~=0) = solution.z;
        reacInd = abs(x(1:n))>=0.99*getCobraSolverParams('LP', 'feasTol');
    end
end
end